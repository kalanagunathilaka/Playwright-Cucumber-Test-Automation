name: CI Pipeline for JAR and API Tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ./e2eapi/package-lock.json

    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ./e2eapi/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('e2eapi/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Node.js dependencies
      working-directory: ./e2eapi
      run: npm ci

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

  test-apis:
    runs-on: ubuntu-latest
    needs: setup

    services:
      api:
        image: api-server:latest
        ports:
          - 7081:7081
        options: >
          --health-cmd="curl -f http://127.0.0.1:7081/api/health || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build API Server Docker Image
      working-directory: ./API
      run: |
        echo "FROM openjdk:17-jdk-alpine" > Dockerfile
        echo "COPY demo-0.0.1-SNAPSHOT.jar /app.jar" >> Dockerfile
        echo "CMD [\"java\", \"-jar\", \"/app.jar\"]" >> Dockerfile
        docker build -t api-server .

    - name: Verify API Health
      run: curl -v http://127.0.0.1:7081/api/health

    - name: Run Cucumber Tests & Generate Allure Results
      working-directory: ./e2eapi
      run: npx cucumber-js
      continue-on-error: true

    - name: Generate Allure Report
      working-directory: ./e2eapi
      run: npx allure generate allure-results --clean

    - name: Upload Allure Report as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: allure-report
        path: ./e2eapi/allure-report

  deploy-allure:
    runs-on: ubuntu-latest
    needs: [test-apis, setup]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Allure Report Artifact
      uses: actions/download-artifact@v3
      with:
        name: allure-report
        path: allure-report

    - name: Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: allure-report
        keep_files: false
